apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.container_metadata.syntasa_data_gateway_service.name }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.container_metadata.syntasa_data_gateway_service.name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ .Values.container_metadata.syntasa_data_gateway_service.name }}
    spec:
      serviceAccountName: {{ .Values.syn_kube_service_account }}
      volumes:
      - name: key-volume
        secret:
          secretName: syntasa-key
      containers:
      - image: "{{ .Values.global.image.repository }}/{{ .Values.container_metadata.syntasa_data_gateway_service.image_name }}:{{ .Values.global.image.tag }}"
        name: {{ .Values.container_metadata.syntasa_data_gateway_service.name }}
        imagePullPolicy: Always
        ports:
        - containerPort: {{ .Values.container_metadata.syntasa_data_gateway_service.container_port | int }}
        env:
        - name: DATA_GATEWAY_SERVICE_GROUP_ID
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.global.configMap.name }}
              key: syntasa_data_gateway_service_group_id
        - name: ENCRYPTION_ENABLE
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.global.configMap.name }}
              key: syntasa_data_gateway_service_encryption_enable
        - name: DATA_GATEWAY_SERVICE_RUNTIME_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.global.configMap.name }}
              key: syntasa_runtime_url
        - name: DATA_GATEWAY_SERVICE_KAFKA_BROKER
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.global.configMap.name }}
              key: syntasa_kafka_service_url
        volumeMounts:
        - name: key-volume
          readOnly: true
          mountPath: "/opt/keys"
      imagePullSecrets:
      - name: {{.Values.global.imagePullSecret.name }}
